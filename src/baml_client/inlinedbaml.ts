/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
const fileMap = {
  
  "clients.baml": "// Learn more about clients at https://docs.boundaryml.com/docs/snippets/clients/overview\n\nclient<llm> CustomGPT4o {\n  provider openai\n  options {\n    model \"gpt-4o\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> CustomGPT4oMini {\n  provider openai\n  retry_policy Exponential\n  options {\n    model \"gpt-4o-mini\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> CustomSonnet {\n  provider anthropic\n  options {\n    model \"claude-3-5-sonnet-20241022\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\n\nclient<llm> CustomHaiku {\n  provider anthropic\n  retry_policy Constant\n  options {\n    model \"claude-3-haiku-20240307\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/round-robin\nclient<llm> CustomFast {\n  provider round-robin\n  options {\n    // This will alternate between the two clients\n    strategy [CustomGPT4oMini, CustomHaiku]\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/fallback\nclient<llm> OpenaiFallback {\n  provider fallback\n  options {\n    // This will try the clients in order until one succeeds\n    strategy [CustomGPT4oMini, CustomGPT4oMini]\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/retry\nretry_policy Constant {\n  max_retries 3\n  // Strategy is optional\n  strategy {\n    type constant_delay\n    delay_ms 200\n  }\n}\n\nretry_policy Exponential {\n  max_retries 2\n  // Strategy is optional\n  strategy {\n    type exponential_backoff\n    delay_ms 300\n    multiplier 1.5\n    max_delay_ms 10000\n  }\n}",
  "debt-collection.baml": "// src/baml_src/debt_negotiation.baml\n\nclass PaymentPlan {\n  termLength int @description(\"Number of terms for the payment plan, between 3 and 24\")\n  totalDebtAmount float @description(\"Total debt amount\")\n  termPaymentAmount float @description(\"Amount per payment term\")\n  frequency \"weekly\" | \"biweekly\" | \"monthly\" @description(\"Frequency of payments\")\n}\n\nclass AssistantResponse {\n  message string @description(\"The message to display to the user\")\n  status \"negotiating\" | \"agreement_reached\" | \"need_clarification\" @description(\"Current status of the negotiation\")\n  paymentPlan PaymentPlan? @description(\"Payment plan details, null during initial negotiation\")\n  paymentUrl string? @description(\"Payment URL, only included when status is agreement_reached\")\n}\n\nclass MyUserMessage {\n  role \"user\" | \"assistant\"\n  content string\n  id string\n}\n\nfunction ChatWithLLM(messages: MyUserMessage[]) -> AssistantResponse {\n  client CustomGPT4o\n  prompt #\"\n    You are a debt collection agent assistant. Your role is to help negotiate payment plans with users who owe $2400.\n    \n    Key Guidelines:\n    - Be professional but empathetic\n    - Be concise and to the point\n    - Offer flexible payment plans (monthly, biweekly, or weekly) only\n    - Payment plans must be between 3-24 months\n    - Monthly payment must be at least 5% of total debt ($120/month minimum)\n    - If terms are unreasonable, counter with a better proposal\n    - Once agreement is reached, provide a payment link\n\n    Negotiation Approach:\n    - Lead with empathy and understanding\n    - Ask about their financial situation if unclear to get to know them and their situation\n    - Then try to ask about their payment preferences and constraints\n    - If possible, adapt payment schedules to their income timing (weekly/biweekly/monthly)\n    - Try to offer payment plans that match their circumstances (but don't mix payment amounts)\n    - If they're struggling, explore why before trying to propose solutions\n    - Counter unreasonable proposals with educational explanations and don't give up\n    \n    Payment Plan Rules:\n    - Minimum term length: 1 month\n    - Maximum term length: 24 months\n    - Minimum monthly payment: 5% of total debt ($120/month)\n    - Payment frequencies allowed: weekly, biweekly, monthly\n    - If user agrees to a payment within 0.1% or 10 cents (whichever is lower) of target amount, consider it valid\n    \n    Assistant Response Rules:\n    1. Always provide a clear, empathetic message\n    2. Set status to:\n       - \"negotiating\" when discussing terms or understanding situation\n       - \"agreement_reached\" when user accepts a valid plan\n       - \"need_clarification\" when user's response is unclear\n    3. For paymentPlan:\n       - Include complete plan details when proposing or accepting terms\n       - Set to null during initial negotiation or unclear responses\n    4. For paymentUrl:\n       - Only include when status is \"agreement_reached\"\n       - Use format: collectwise.com/payments?termLength={termLength}&totalDebtAmount=2400&termPaymentAmount={termPaymentAmount}\n       - Set to empty string (\"\") when not providing a payment link\n    \n    Previous conversation:\n    {% for message in messages %}\n    {{ message.role }}: {{ message.content }}\n    {% endfor %}\n\n    Assistant: Let me help with the debt negotiation.\n\n    {{ ctx.output_format }}\n  \"#\n}\n\n\ntest math_check_needed {\n  functions [ChatWithLLM]\n  args {\n    messages [\n      {\n        role \"user\"\n        content \"How about $150 biweekly for 8 months?\"\n        id \"1\"\n      }\n    ]\n  }\n}\n\n// Test basic negotiation start\ntest BasicNegotiationStart {\n  functions [ChatWithLLM]\n  args {\n    messages [\n      {\n        role \"user\"\n        content \"I need to set up a payment plan for my $2400 debt.\"\n        id \"start-1\"\n      }\n    ]\n  }\n}\n\n// Test valid weekly payment plan\ntest ValidWeeklyPlan {\n  functions [ChatWithLLM]\n  args {\n    messages [\n      {\n        role \"user\"\n        content \"I can pay $100 per week for 24 weeks.\"\n        id \"weekly-1\"\n      }\n    ]\n  }\n}\n\n// Test valid monthly payment plan\ntest ValidMonthlyPlan {\n  functions [ChatWithLLM]\n  args {\n    messages [\n      {\n        role \"user\"\n        content \"I'd like to pay $400 monthly for 6 months.\"\n        id \"monthly-1\"\n      }\n    ]\n  }\n}\n\n// Test invalid payment amount (too low)\ntest InvalidLowPayment {\n  functions [ChatWithLLM]\n  args {\n    messages [\n      {\n        role \"user\"\n        content \"I can only afford $20 per week.\"\n        id \"low-1\"\n      }\n    ]\n  }\n}\n\n// Test invalid term length (too long)\ntest InvalidTermLength {\n  functions [ChatWithLLM]\n  args {\n    messages [\n      {\n        role \"user\"\n        content \"I want to pay $50 per month for 36 months.\"\n        id \"term-1\"\n      }\n    ]\n  }\n}\n\n// Test negotiation with multiple messages\ntest NegotiationFlow {\n  functions [ChatWithLLM]\n  args {\n    messages [\n      {\n        role \"user\"\n        content \"I need to set up a payment plan for my debt.\"\n        id \"flow-1\"\n      },\n      {\n        role \"assistant\"\n        content \"I understand you need to set up a payment plan for your $2400 debt. What kind of monthly payment would work for your budget?\"\n        id \"flow-2\"\n      },\n      {\n        role \"user\"\n        content \"I can do $200 per month.\"\n        id \"flow-3\"\n      }\n    ]\n  }\n}\n\n// Test edge case - exact minimum payment\ntest MinimumPayment {\n  functions [ChatWithLLM]\n  args {\n    messages [\n      {\n        role \"user\"\n        content \"I want to pay exactly $120 per month.\"\n        id \"min-1\"\n      }\n    ]\n  }\n}\n\n// Test biweekly payment plan\ntest BiweeklyPlan {\n  functions [ChatWithLLM]\n  args {\n    messages [\n      {\n        role \"user\"\n        content \"I get paid biweekly. Can I pay $200 every two weeks?\"\n        id \"biweekly-1\"\n      }\n    ]\n  }\n}\n\n// Test handling unclear responses\ntest UnclearResponse {\n  functions [ChatWithLLM]\n  args {\n    messages [\n      {\n        role \"user\"\n        content \"Maybe I can pay something each week, not sure how much though.\"\n        id \"unclear-1\"\n      }\n    ]\n  }\n}\n\n// Test validation feedback loop\ntest ValidationFeedback {\n  functions [ChatWithLLM]\n  args {\n    messages [\n      {\n        role \"user\"\n        content \"I can pay $150 per week for 20 weeks.\"\n        id \"validation-1\"\n      },\n      {\n        role \"assistant\"\n        content \"That would exceed the total debt amount. Let me suggest a corrected plan.\"\n        id \"validation-2\"\n      },\n      {\n        role \"user\"\n        content \"Okay, what would work better?\"\n        id \"validation-3\"\n      }\n    ]\n  }\n}\n\n// Test handling of special characters and formatting\ntest SpecialCharacters {\n  functions [ChatWithLLM]\n  args {\n    messages [\n      {\n        role \"user\"\n        content \"I can pay $1,000.50 for 2.5 months!!!\"\n        id \"special-1\"\n      }\n    ]\n  }\n}\n\n// Test agreement reached scenario\ntest AgreementReached {\n  functions [ChatWithLLM]\n  args {\n    messages [\n      {\n        role \"user\"\n        content \"I agree to pay $100 weekly for 24 weeks.\"\n        id \"agreement-1\"\n      }\n    ]\n  }\n}\n\n// Test decimal payment amounts\ntest DecimalPaymentPlan {\n  functions [ChatWithLLM]\n  args {\n    messages [\n      {\n        role \"user\"\n        content \"I can pay $156.50 every two weeks.\"\n        id \"decimal-1\"\n      }\n    ]\n  }\n}\n\n// Test decimal payment with cents\ntest DecimalCentsPayment {\n  functions [ChatWithLLM]\n  args {\n    messages [\n      {\n        role \"user\"\n        content \"I'd like to do monthly payments of $267.75\"\n        id \"decimal-2\"\n      }\n    ]\n  }\n}\n\n// Test early payoff inquiry\ntest EarlyPayoffInquiry {\n  functions [ChatWithLLM]\n  args {\n    messages [\n      {\n        role \"user\"\n        content \"If I agree to $200 weekly payments, can I pay off the debt early if I get some extra money?\"\n        id \"early-1\"\n      }\n    ]\n  }\n}\n\n// Test early payoff during existing plan\ntest EarlyPayoffExistingPlan {\n  functions [ChatWithLLM]\n  args {\n    messages [\n      {\n        role \"user\"\n        content \"I've been paying $150 biweekly, but I just got my tax return. Can I pay off the remaining balance now?\"\n        id \"early-2\"\n      },\n      {\n        role \"assistant\"\n        content \"Of course! Early payoff is always welcome. Would you like me to calculate your remaining balance and provide a direct payment link?\"\n        id \"early-3\"\n      },\n      {\n        role \"user\"\n        content \"Yes please, I want to pay it all off now.\"\n        id \"early-4\"\n      }\n    ]\n  }\n}\n\n// Test partial early payoff\ntest PartialEarlyPayoff {\n  functions [ChatWithLLM]\n  args {\n    messages [\n      {\n        role \"user\"\n        content \"I'm currently paying $120 monthly, but I got a bonus and can put $1000 towards the debt. Can I do that and then continue with smaller payments for the rest?\"\n        id \"early-5\"\n      }\n    ]\n  }\n}\n\n// Test precision handling and loop prevention\ntest PrecisionHandling {\n  functions [ChatWithLLM]\n  args {\n    messages [\n      {\n        role \"user\"\n        content \"I want to pay this off in 9 months with equal payments.\"\n        id \"precision-1\"\n      },\n      {\n        role \"assistant\"\n        content \"For a 9-month payment plan, each monthly payment should be $266.67, which totals exactly $2400. Does this work for you?\"\n        id \"precision-2\"\n      },\n      {\n        role \"user\"\n        content \"yes\"\n        id \"precision-3\"\n      }\n    ]\n  }\n}",
  "generators.baml": "// This helps use auto generate libraries you can use in the language of\n// your choice. You can have multiple generators if you use multiple languages.\n// Just ensure that the output_dir is different for each generator.\ngenerator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\", \"rest/openapi\"\n    output_type \"typescript/react\"\n\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n\n    // The version of the BAML package you have installed (e.g. same version as your baml-py or @boundaryml/baml).\n    // The BAML VSCode extension version should also match this version.\n    version \"0.85.0\"\n\n    // Valid values: \"sync\", \"async\"\n    // This controls what `b.FunctionName()` will be (sync or async).\n    default_client_mode async\n}\n",
}
export const getBamlFiles = () => {
    return fileMap;
}